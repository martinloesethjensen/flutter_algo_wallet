// Mocks generated by Mockito 5.0.9 from annotations
// in flutter_algo_wallet/test/node_test/node_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i15;

import 'package:algorand_dart/src/algorand.dart' as _i14;
import 'package:algorand_dart/src/api/responses/transactions/pending_transactions_response.dart'
    as _i12;
import 'package:algorand_dart/src/clients/algod_client.dart' as _i2;
import 'package:algorand_dart/src/clients/indexer_client.dart' as _i3;
import 'package:algorand_dart/src/indexer/algorand_indexer.dart' as _i6;
import 'package:algorand_dart/src/managers/application_manager.dart' as _i5;
import 'package:algorand_dart/src/managers/asset_manager.dart' as _i4;
import 'package:algorand_dart/src/models/accounts/account_information_model.dart'
    as _i11;
import 'package:algorand_dart/src/models/accounts/account_model.dart' as _i7;
import 'package:algorand_dart/src/models/addresses/address_model.dart' as _i17;
import 'package:algorand_dart/src/models/ledgers/ledger_supply.dart' as _i9;
import 'package:algorand_dart/src/models/nodes/node_status_model.dart' as _i8;
import 'package:algorand_dart/src/models/transactions/pending_transaction_model.dart'
    as _i13;
import 'package:algorand_dart/src/models/transactions/signed_transaction_model.dart'
    as _i16;
import 'package:algorand_dart/src/models/transactions/transaction_params_model.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAlgodClient extends _i1.Fake implements _i2.AlgodClient {}

class _FakeIndexerClient extends _i1.Fake implements _i3.IndexerClient {}

class _FakeAssetManager extends _i1.Fake implements _i4.AssetManager {}

class _FakeApplicationManager extends _i1.Fake
    implements _i5.ApplicationManager {}

class _FakeAlgorandIndexer extends _i1.Fake implements _i6.AlgorandIndexer {}

class _FakeAccount extends _i1.Fake implements _i7.Account {}

class _FakeNodeStatus extends _i1.Fake implements _i8.NodeStatus {}

class _FakeLedgerSupply extends _i1.Fake implements _i9.LedgerSupply {}

class _FakeTransactionParams extends _i1.Fake
    implements _i10.TransactionParams {}

class _FakeAccountInformation extends _i1.Fake
    implements _i11.AccountInformation {}

class _FakePendingTransactionsResponse extends _i1.Fake
    implements _i12.PendingTransactionsResponse {}

class _FakePendingTransaction extends _i1.Fake
    implements _i13.PendingTransaction {}

/// A class which mocks [Algorand].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlgorand extends _i1.Mock implements _i14.Algorand {
  MockAlgorand() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AlgodClient get algodClient =>
      (super.noSuchMethod(Invocation.getter(#algodClient),
          returnValue: _FakeAlgodClient()) as _i2.AlgodClient);
  @override
  _i3.IndexerClient get indexerClient =>
      (super.noSuchMethod(Invocation.getter(#indexerClient),
          returnValue: _FakeIndexerClient()) as _i3.IndexerClient);
  @override
  _i4.AssetManager get assetManager =>
      (super.noSuchMethod(Invocation.getter(#assetManager),
          returnValue: _FakeAssetManager()) as _i4.AssetManager);
  @override
  _i5.ApplicationManager get applicationManager =>
      (super.noSuchMethod(Invocation.getter(#applicationManager),
          returnValue: _FakeApplicationManager()) as _i5.ApplicationManager);
  @override
  _i6.AlgorandIndexer indexer() =>
      (super.noSuchMethod(Invocation.method(#indexer, []),
          returnValue: _FakeAlgorandIndexer()) as _i6.AlgorandIndexer);
  @override
  _i15.Future<_i7.Account> createAccount() =>
      (super.noSuchMethod(Invocation.method(#createAccount, []),
              returnValue: Future<_i7.Account>.value(_FakeAccount()))
          as _i15.Future<_i7.Account>);
  @override
  _i15.Future<_i7.Account> loadAccountFromPrivateKey(String? privateKey) =>
      (super.noSuchMethod(
              Invocation.method(#loadAccountFromPrivateKey, [privateKey]),
              returnValue: Future<_i7.Account>.value(_FakeAccount()))
          as _i15.Future<_i7.Account>);
  @override
  _i15.Future<_i7.Account> loadAccountFromSeed(List<int>? seed) =>
      (super.noSuchMethod(Invocation.method(#loadAccountFromSeed, [seed]),
              returnValue: Future<_i7.Account>.value(_FakeAccount()))
          as _i15.Future<_i7.Account>);
  @override
  _i15.Future<_i7.Account> restoreAccount(List<String>? words) =>
      (super.noSuchMethod(Invocation.method(#restoreAccount, [words]),
              returnValue: Future<_i7.Account>.value(_FakeAccount()))
          as _i15.Future<_i7.Account>);
  @override
  _i15.Future<String> genesis() =>
      (super.noSuchMethod(Invocation.method(#genesis, []),
          returnValue: Future<String>.value('')) as _i15.Future<String>);
  @override
  _i15.Future<bool> health() =>
      (super.noSuchMethod(Invocation.method(#health, []),
          returnValue: Future<bool>.value(false)) as _i15.Future<bool>);
  @override
  _i15.Future<_i8.NodeStatus> status() =>
      (super.noSuchMethod(Invocation.method(#status, []),
              returnValue: Future<_i8.NodeStatus>.value(_FakeNodeStatus()))
          as _i15.Future<_i8.NodeStatus>);
  @override
  _i15.Future<_i8.NodeStatus> statusAfterRound(int? round) =>
      (super.noSuchMethod(Invocation.method(#statusAfterRound, [round]),
              returnValue: Future<_i8.NodeStatus>.value(_FakeNodeStatus()))
          as _i15.Future<_i8.NodeStatus>);
  @override
  _i15.Future<_i9.LedgerSupply> supply() =>
      (super.noSuchMethod(Invocation.method(#supply, []),
              returnValue: Future<_i9.LedgerSupply>.value(_FakeLedgerSupply()))
          as _i15.Future<_i9.LedgerSupply>);
  @override
  _i15.Future<_i10.TransactionParams> getSuggestedTransactionParams() =>
      (super.noSuchMethod(Invocation.method(#getSuggestedTransactionParams, []),
              returnValue: Future<_i10.TransactionParams>.value(
                  _FakeTransactionParams()))
          as _i15.Future<_i10.TransactionParams>);
  @override
  _i15.Future<String> sendTransaction(_i16.SignedTransaction? transaction,
          {bool? waitForConfirmation = false, int? timeout = 5}) =>
      (super.noSuchMethod(
          Invocation.method(#sendTransaction, [transaction],
              {#waitForConfirmation: waitForConfirmation, #timeout: timeout}),
          returnValue: Future<String>.value('')) as _i15.Future<String>);
  @override
  _i15.Future<String> sendTransactions(
          List<_i16.SignedTransaction>? transactions) =>
      (super.noSuchMethod(Invocation.method(#sendTransactions, [transactions]),
          returnValue: Future<String>.value('')) as _i15.Future<String>);
  @override
  _i15.Future<String> sendPayment(
          {_i7.Account? account,
          _i17.Address? recipient,
          int? amount,
          String? note,
          bool? waitForConfirmation = false,
          int? timeout = 5}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPayment, [], {
            #account: account,
            #recipient: recipient,
            #amount: amount,
            #note: note,
            #waitForConfirmation: waitForConfirmation,
            #timeout: timeout
          }),
          returnValue: Future<String>.value('')) as _i15.Future<String>);
  @override
  _i15.Future<_i11.AccountInformation> getAccountByAddress(String? address) =>
      (super.noSuchMethod(Invocation.method(#getAccountByAddress, [address]),
              returnValue: Future<_i11.AccountInformation>.value(
                  _FakeAccountInformation()))
          as _i15.Future<_i11.AccountInformation>);
  @override
  _i15.Future<int> getBalance(String? address) =>
      (super.noSuchMethod(Invocation.method(#getBalance, [address]),
          returnValue: Future<int>.value(0)) as _i15.Future<int>);
  @override
  _i15.Future<_i12.PendingTransactionsResponse> getPendingTransactionsByAddress(
          String? address,
          {int? max = 0}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getPendingTransactionsByAddress, [address], {#max: max}),
              returnValue: Future<_i12.PendingTransactionsResponse>.value(
                  _FakePendingTransactionsResponse()))
          as _i15.Future<_i12.PendingTransactionsResponse>);
  @override
  _i15.Future<_i12.PendingTransactionsResponse> getPendingTransactions(
          {int? max = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getPendingTransactions, [], {#max: max}),
              returnValue: Future<_i12.PendingTransactionsResponse>.value(
                  _FakePendingTransactionsResponse()))
          as _i15.Future<_i12.PendingTransactionsResponse>);
  @override
  _i15.Future<_i13.PendingTransaction> getPendingTransactionById(
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#getPendingTransactionById, [transactionId]),
              returnValue: Future<_i13.PendingTransaction>.value(
                  _FakePendingTransaction()))
          as _i15.Future<_i13.PendingTransaction>);
  @override
  _i15.Future<_i13.PendingTransaction> waitForConfirmation(
          String? transactionId,
          {int? timeout = 5}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #waitForConfirmation, [transactionId], {#timeout: timeout}),
              returnValue: Future<_i13.PendingTransaction>.value(
                  _FakePendingTransaction()))
          as _i15.Future<_i13.PendingTransaction>);
}
